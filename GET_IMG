from selenium import webdriver
from selenium.webdriver.support.ui import Select
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
import datetime
import time

options = webdriver.ChromeOptions()
options.add_argument('headless')
options.add_argument('window-size=1200x600') # optional

#Set to HEADLESS Chrome Driver (UNCOMMENT BELOW LINE)
#driver = webdriver.Chrome(chrome_options=options) #un-comment for headless
#driver = webdriver.Chrome(executable_path='/usr/local/bin/chromedriver 4')

#Set to Chrome Driver (UNCOMMENT BELOW LINE TO SEE BROWSER SIMULATED ACTIONS)
print('\n---NOW STARTING CHROME SERVER---\n')
#driver = webdriver.Chrome() #--Only use this line if you are working in windows
driver = webdriver.Chrome(executable_path='/usr/local/bin/chromedriver 4')

#Go to Tours page
driver.get("http://rest.caftest.org/tours")
print('\nRetrieving all Images on Tours Page\n')

noDisplay = []
yesDisplay = []

def get_tour_images():
 tourImages = driver.find_elements_by_tag_name('img')
 for image in tourImages:   
  width = image.get_attribute("naturalWidth")
  height = image.get_attribute("naturalHeight") 
  #if width & height of source image is 0 then image is not present on page
  if (int(width) == 0 and int(height) == 0):
   #add any missing images to this list
   noDisplay.append(image.get_attribute('src')) 
  else:
   yesDisplay.append(image.get_attribute('src'))  
   

def working_links(lists):
  for links in lists:
   print(links)   
  print('\nThere are ' + (str(len(lists))) + ' working links (see above) on this web page!\n')  

def nonWorking_links(lists):
  for links in lists:
   broken = links   
  print('\nThere is/are ' + (str(len(lists))) + ' broken links (see below) on this web page!\n')
  print(links)

get_tour_images()

working_links(yesDisplay)
nonWorking_links(noDisplay)

time.sleep(10)
driver.close()